"use strict";(self.webpackChunkandroid_utils_docs=self.webpackChunkandroid_utils_docs||[]).push([[968],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),m=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=m(a),k=r,f=c["".concat(l,".").concat(k)]||c[k]||p[k]||i;return a?n.createElement(f,o(o({ref:t},d),{},{components:a})):n.createElement(f,o({ref:t},d))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var m=2;m<i;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},5979:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var n=a(7462),r=(a(7294),a(3905));const i={id:"watermark",title:"Watermark",description:"Set of utilities to draw a text watermarks or a drawable watermarks into images."},o=void 0,s={unversionedId:"library-utilities/watermark",id:"library-utilities/watermark",title:"Watermark",description:"Set of utilities to draw a text watermarks or a drawable watermarks into images.",source:"@site/docs/library-utilities/watermark.md",sourceDirName:"library-utilities",slug:"/library-utilities/watermark",permalink:"/Android-Utils/docs/library-utilities/watermark",draft:!1,editUrl:"https://github.com/JeovaniMartinez/Android-Utils/edit/documentation/docs/library-utilities/watermark.md",tags:[],version:"current",frontMatter:{id:"watermark",title:"Watermark",description:"Set of utilities to draw a text watermarks or a drawable watermarks into images."},sidebar:"mainSidebar",previous:{title:"Rate App",permalink:"/Android-Utils/docs/library-utilities/rate-app"},next:{title:"View To Image",permalink:"/Android-Utils/docs/library-utilities/view-to-image"}},l={},m=[{value:"Description",id:"description",level:2},{value:"Code required to process the image as in the example:",id:"code-required-to-process-the-image-as-in-the-example",level:4},{value:"Basic Concepts",id:"basic-concepts",level:2},{value:"Watermark Position",id:"watermark-position",level:3},{value:"Fixed Positions",id:"fixed-positions",level:4},{value:"Absolute Position",id:"absolute-position",level:4},{value:"Offset",id:"offset",level:3},{value:"Offset For Fixed Positions",id:"offset-for-fixed-positions",level:4},{value:"Offset For Absolute Position",id:"offset-for-absolute-position",level:4},{value:"Measurement Dimension",id:"measurement-dimension",level:3},{value:"Watermark",id:"watermark",level:2},{value:'<a href="/reference/-android%20-utils/com.jeovanimartinez.androidutils.watermark/-watermark/index.html" target="_blank"><b> Reference </b></a>',id:"-reference--2",level:4},{value:"Drawable",id:"drawable",level:3},{value:"Usage",id:"usage",level:4},{value:"Text",id:"text",level:3},{value:"Usage",id:"usage-1",level:4},{value:"Watermark Utils",id:"watermark-utils",level:2},{value:'<a href="/reference/-android%20-utils/com.jeovanimartinez.androidutils.watermark/-watermark-utils/index.html" target="_blank"><b> Reference </b></a>',id:"-reference--5",level:4},{value:"Draw Watermark",id:"draw-watermark",level:3},{value:"Usage",id:"usage-2",level:4},{value:"Result",id:"result",level:4}],d={toc:m};function p(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("p",null,"Set of utilities to draw a text watermarks or a drawable watermarks into images."),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:a(7675).Z,alt:""})),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:a(2492).Z,alt:""})),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:a(9259).Z,alt:""})),(0,r.kt)("h4",{id:"code-required-to-process-the-image-as-in-the-example"},"Code required to process the image as in the example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'// Get the bitmap from image resource\nval bitmap = BitmapFactory.decodeResource(\n    resources,\n    R.drawable.watermark_base1,\n    BitmapFactory.Options().apply { inMutable = true; inScaled = false }\n)\n\n// Create a shape to draw into image\nval shape = GradientDrawable()\n    .apply { shape = GradientDrawable.RECTANGLE; setColor(Color.BLACK) }\n\n// Create and draw the watermarks on the image\nWatermarkUtils.drawWatermark(\n    context,\n    bitmap,\n    arrayListOf(\n        Watermark.Drawable(\n            drawable = R.drawable.library_logo,\n            position = WatermarkPosition.MIDDLE_CENTER,\n            width = 150f,\n            height = 150f,\n            dx = 0f,\n            dy = -20f,\n            rotation = 0f,\n            opacity = 0.85f,\n            measurementDimension = Dimension.PX\n        ),\n        Watermark.Drawable(\n            drawable = shape,\n            position = WatermarkPosition.MIDDLE_CENTER,\n            width = 807f,\n            height = 80f,\n            dx = 0f,\n            dy = 100f,\n            rotation = 0f,\n            opacity = 0.6f,\n            measurementDimension = Dimension.PX\n        ),\n        Watermark.Text(\n            text = "Android Utils",\n            textSize = 40f,\n            textColor = Color.WHITE,\n            position = WatermarkPosition.MIDDLE_CENTER,\n            dx = 0f,\n            dy = 108f,\n            rotation = 0f,\n            opacity = 0.9f,\n            typeface = getFontCompat(R.font.oi_regular),\n            shadow = WatermarkShadow(2f, 3f, 3f, Color.BLACK),\n            measurementDimension = Dimension.PX\n        ),\n        Watermark.Text(\n            text = "Watermark Demo",\n            textSize = 20f,\n            textColor = Color.WHITE,\n            position = WatermarkPosition.TOP_LEFT,\n            dx = 10f,\n            dy = 10f,\n            rotation = 315f,\n            opacity = 0.6f,\n            typeface = null,\n            shadow = WatermarkShadow(2f, 3f, 3f, Color.BLACK),\n            measurementDimension = Dimension.PX\n        ),\n        Watermark.Text(\n            text = "Watermark Demo",\n            textSize = 20f,\n            textColor = Color.WHITE,\n            position = WatermarkPosition.TOP_RIGHT,\n            dx = -10f,\n            dy = 10f,\n            rotation = 45f,\n            opacity = 0.6f,\n            typeface = null,\n            shadow = WatermarkShadow(2f, 3f, 3f, Color.BLACK),\n            measurementDimension = Dimension.PX\n        )\n    )\n)\n\n// Save image into file using FileUtils\nFileUtils.saveBitmapToFile(\n    context = context,\n    bitmap = bitmap,\n    fileName = "watermark-demo",\n    format = Bitmap.CompressFormat.JPEG\n)\n')),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"basic-concepts"},"Basic Concepts"),(0,r.kt)("h3",{id:"watermark-position"},"Watermark Position"),(0,r.kt)("p",null,"To create a watermark it is necessary to define the position that it will have within the image."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"WatermarkPosition enum defines the position where the watermark can be place within the image."),(0,r.kt)("h4",{parentName:"blockquote",id:"-reference-"},(0,r.kt)("a",{href:"/reference/-android%20-utils/com.jeovanimartinez.androidutils.watermark.config/-watermark-position/index.html",target:"_blank"},(0,r.kt)("b",null,"[ Reference ]")))),(0,r.kt)("h4",{id:"fixed-positions"},"Fixed Positions"),(0,r.kt)("p",null,"The enum defines 9 fixed positions for the watermark, as shown in the following image:"),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:a(4342).Z,alt:""})),(0,r.kt)("h4",{id:"absolute-position"},"Absolute Position"),(0,r.kt)("p",null,"Additionally, the enum has an ",(0,r.kt)("inlineCode",{parentName:"p"},"ABSOLUTE")," position, which allows the watermark to be placed freely within the image. The origin or pivot of the watermark\nis the center of it."),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:a(328).Z,alt:""})),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"offset"},"Offset"),(0,r.kt)("p",null,"When creating a watermark, it is also necessary to define its offset, both for the x and y axis. This offset can be negative, zero or positive, and\nits interpretation is according to the position of the watermark."),(0,r.kt)("h4",{id:"offset-for-fixed-positions"},"Offset For Fixed Positions"),(0,r.kt)("p",null,"The offset in the fixed positions allows to set a margin for the watermark, and its value must be assigned according to the position, for example:"),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:a(1408).Z,alt:""})),(0,r.kt)("h4",{id:"offset-for-absolute-position"},"Offset For Absolute Position"),(0,r.kt)("p",null,"The offset in the absolute position, sets the position of the watermark within the image, for example:"),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:a(8917).Z,alt:""})),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"measurement-dimension"},"Measurement Dimension"),(0,r.kt)("p",null,"When set the properties for the watermark, you can specify the ",(0,r.kt)("inlineCode",{parentName:"p"},"measurementDimension"),", the default is in pixels (PX), but sometimes it can be useful to\nuse density-independent pixels (DP)."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Dimension enum defines the allowed dimensions for a watermark."),(0,r.kt)("h4",{parentName:"blockquote",id:"-reference--1"},(0,r.kt)("a",{href:"/reference/-android%20-utils/com.jeovanimartinez.androidutils.graphics.utils/-dimension/index.html",target:"_blank"},(0,r.kt)("b",null,"[ Reference ]")))),(0,r.kt)("p",null,"For example, in the following image we define a text watermark, in the ",(0,r.kt)("inlineCode",{parentName:"p"},"BOTTOM_CENTER")," position, if we want a margin in y-axis of 50 px, for ",(0,r.kt)("inlineCode",{parentName:"p"},"Dimension.PX"),"\nwe must set dy to -50. But if we use ",(0,r.kt)("inlineCode",{parentName:"p"},"Dimension.DP"),", we must set dy to -25, since the density of the screen is 2.0 and that -25 will be converted to pixels\nat the moment of drawing the watermark."),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:a(6129).Z,alt:""})),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Measurement dimension applies only to the following watermark properties:"),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"dx"),(0,r.kt)("li",{parentName:"ul"},"dy"),(0,r.kt)("li",{parentName:"ul"},"width"),(0,r.kt)("li",{parentName:"ul"},"height"),(0,r.kt)("li",{parentName:"ul"},"textSize"),(0,r.kt)("li",{parentName:"ul"},"shadow")))),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("inlineCode",{parentName:"p"},"Dimension.SP")," is allowed for the ",(0,r.kt)("inlineCode",{parentName:"p"},"measurementDimension")," property, however it is ",(0,r.kt)("strong",{parentName:"p"},"not recommended")," to use it, since if, for example, the device uses a font size larger\nor smaller than the default, this will cause an unwanted change in the dimensions of the watermark. Even for the textSize property of the text watermark,\nit is recommended to use Dimension.DP, since the size will depend on the density, but not on the scale of the text."))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"watermark"},"Watermark"),(0,r.kt)("h4",{id:"-reference--2"},(0,r.kt)("a",{href:"/reference/-android%20-utils/com.jeovanimartinez.androidutils.watermark/-watermark/index.html",target:"_blank"},(0,r.kt)("b",null,"[ Reference ]"))),(0,r.kt)("p",null,"Before to draw the watermark on the image, is needed create an object with the watermark configuration. The library defines two types of watermark, text\nand drawable (image, shape, etc.)."),(0,r.kt)("h3",{id:"drawable"},"Drawable"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This type of watermark allows to draw any drawable on the image."),(0,r.kt)("h4",{parentName:"blockquote",id:"-reference--3"},(0,r.kt)("a",{href:"/reference/-android%20-utils/com.jeovanimartinez.androidutils.watermark/-watermark/-drawable/index.html",target:"_blank"},(0,r.kt)("b",null,"[ Reference ]")))),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val drawableWatermark = Watermark.Drawable(\n    drawable = R.drawable.library_logo,\n    position = WatermarkPosition.BOTTOM_LEFT,\n    width = 80f,\n    height = 80f,\n    dx = 10f,\n    dy = -5f,\n    rotation = 0f,\n    opacity = 0.8f,\n    measurementDimension = Dimension.PX\n)\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"text"},"Text"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This type of watermark allows to draw any text on the image."),(0,r.kt)("h4",{parentName:"blockquote",id:"-reference--4"},(0,r.kt)("a",{href:"/reference/-android%20-utils/com.jeovanimartinez.androidutils.watermark/-watermark/-text/index.html",target:"_blank"},(0,r.kt)("b",null,"[ Reference ]")))),(0,r.kt)("h4",{id:"usage-1"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val textWatermark = Watermark.Text(\n    text = "Sample Watermark By Android Utils",\n    textSize = 30f,\n    textColor = Color.WHITE,\n    position = WatermarkPosition.TOP_RIGHT,\n    dx = -10f,\n    dy = 10f,\n    rotation = 0f,\n    opacity = 0.65f,\n    typeface = getFontCompat(R.font.fugaz_one_regular),\n    shadow = WatermarkShadow(2f, 10f, 20f, Color.parseColor("#1976D2")),\n    measurementDimension = Dimension.PX\n)\n')),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"watermark-utils"},"Watermark Utils"),(0,r.kt)("h4",{id:"-reference--5"},(0,r.kt)("a",{href:"/reference/-android%20-utils/com.jeovanimartinez.androidutils.watermark/-watermark-utils/index.html",target:"_blank"},(0,r.kt)("b",null,"[ Reference ]"))),(0,r.kt)("p",null,"After defining the watermarks, this utility takes care of processing and drawing them on the images."),(0,r.kt)("h3",{id:"draw-watermark"},"Draw Watermark"),(0,r.kt)("p",null,"Allows to draw watermarks on a bitmap image. The utility has functions to draw one or a list of watermarks."),(0,r.kt)("h4",{id:"usage-2"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"{1,5}","{1,5}":!0},"// To draw a watermark\nWatermarkUtils.drawWatermark(context, bitmap, drawableWatermark)\nWatermarkUtils.drawWatermark(context, bitmap, textWatermark)\n\n// To draw a list of watermarks\nWatermarkUtils.drawWatermark(\n    context,\n    bitmap,\n    arrayListOf(\n        drawableWatermark,\n        drawableWatermark.copy(dx = 95f, opacity = 0.5f),\n        textWatermark\n    )\n)\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You can use the copy function to copy a watermark object for changing only some of its properties, but keeping the rest unchanged."),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"WatermarkUtils.drawWatermark(\n    context, bitmap,\n    drawableWatermark.copy(dx = 95f, opacity = 0.5f)\n)\n")))),(0,r.kt)("h4",{id:"result"},"Result"),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:a(5178).Z,alt:""})))}p.isMDXComponent=!0},7675:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/watermark-img1-a-b69cc0e8b6dca3d459457c33d606eaed.jpeg"},2492:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/watermark-img1-b-0536b44458968595f3497584c7eb4078.png"},9259:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/watermark-img1-c-505aa35133b517d2e2f3eaa88b171e08.jpg"},4342:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/watermark-img2-77f07f8b8568ed03acd66fa647ff1aab.png"},328:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/watermark-img3-312b75d652f0733dad3b3141520dfdb8.png"},1408:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/watermark-img4-50b34b1f07a8142344988e849700458c.png"},8917:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/watermark-img5-a4ff03f89696663236d1bd4879bcac05.png"},6129:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/watermark-img6-2a424c0b31dd4853c7d9e41ba203b3fc.png"},5178:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/watermark-img7-1b8ba7841f9b34dea1eeb09077eed49f.jpeg"}}]);